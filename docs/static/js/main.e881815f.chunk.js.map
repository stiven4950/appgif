{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cats","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","style","GifExpertApp","categories","item","ReactDOM","render","document","getElementById"],"mappings":"mMA6BeA,EA1BY,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAY9C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBAEFN,GAAc,SAAAO,GAAI,OAAKL,GAAL,mBAAoBK,OAEtCJ,EAAc,KAId,SACI,uBACIK,MAAON,EACPO,SAAU,SAACJ,GAAD,OAAOF,EAAcE,EAAEK,OAAOF,a,+BCnB3CG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,mCACTC,EAAM,iDAA2CC,UAAUH,GAArD,sBADG,mCADI,SAIII,MAAMF,GAJV,cAIbG,EAJa,gBAKEA,EAASC,OALX,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCgBDO,EAnBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAN,SAACA,GAAc,IAAD,EACZX,mBAAS,CAC/BkB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAetC,OATAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACfH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAGrB,CAACpB,IAEGqB,EDZwBK,CAAa1B,GAAhCa,EAHkB,EAGvBN,KAAaa,EAHU,EAGVA,QAEpB,OACI,sBAAKJ,UAAU,YAAf,UACI,oBAAIW,MAAO,CAAC,QAAU,QAAS,MAAQ,QAAvC,SAAiD3B,IAChDoB,GAAW,mBAAGJ,UAAU,mCAAb,sBACXH,EAAOJ,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADAA,EAAIC,WEkBdiB,EA7BM,WAAK,IAAD,EAEevC,mBAAS,CAAC,cAFzB,mBAEdwC,EAFc,KAEFzC,EAFE,KAWrB,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,6BACKyC,EAAWpB,KAAI,SAACqB,GAAD,OACZ,cAAC,EAAD,CAEI9B,SAAU8B,GADLA,Y,MClB7BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e881815f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        setCategories(cats => [inputValue, ...cats]);\r\n\r\n        setInputValue(\"\");\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                value={inputValue}\r\n                onChange={(e) => setInputValue(e.target.value)}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddCategory;","export const getGifs = async (category)=>{\r\n    const apiKey = 'B5X3LyiMeo52AiPngAhm25E8VitPE6vU';\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=`+apiKey;\r\n\r\n    const response = await fetch(url);\r\n    const {data} = await response.json();\r\n\r\n    const gifs = data.map(img=>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        };\r\n    });\r\n    \r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n    \r\n    // Los dos puntos indican de qué manera se llamará ahora la variable es como hacer as\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    \r\n    return (\r\n        <div className=\"card-grid\">\r\n            <h3 style={{'display':'block', 'width':'100%'}}>{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Cargando</p>}\r\n            {images.map(img=>(\r\n                <GifGridItem\r\n                    key={img.id}\r\n                    { ...img }\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGrid;\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    \r\n    useEffect(() => {\r\n        getGifs(category).then(imgs=>{\r\n                setState({\r\n                    data:imgs,\r\n                    loading:false\r\n                });\r\n        });\r\n    }, [category]);\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = ()=>{\r\n\r\n    const [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n    /* const handleAdd = ()=>{\r\n        //setCategories([...categories, 'Hunter hunterX']);\r\n        //setCategories(['Hunter hunterX',...categories]);\r\n\r\n        setCategories(cats=>[...cats, 'Hunter hunterX']);\r\n    } */\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr/>\r\n            <AddCategory setCategories={setCategories} />\r\n\r\n            <ol>\r\n                {categories.map((item)=>(\r\n                    <GifGrid\r\n                        key={item}\r\n                        category={item}\r\n                    />\r\n                ))}\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}